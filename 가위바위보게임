#include <stdio.h> // printf, scanf_s 함수를 사용하기 위해 필요한 헤더 파일입니다.
#include <stdbool.h> // bool 자료형을 사용하기 위해 필요한 헤더 파일입니다.
#include <stdlib.h> // malloc, free 함수를 사용하기 위해 필요한 헤더 파일입니다.
#include <string.h> // strlen 함수를 사용하기 위해 필요한 헤더 파일입니다.

// 주어진 rsp 문자열에 대해 이길 수 있는 가위바위보 손동작을 구하는 함수입니다.
char* solution(char* rsp) {
    char* order = (char*)malloc(sizeof(char) * (strlen(rsp) + 1)); // order 문자열을 저장할 메모리를 동적 할당합니다.
    if (order == NULL) { // 동적 할당이 실패한 경우 예외처리를 합니다.
        printf("Error: Failed to allocate memory for order\n");
        exit(1);
    }
    int i;
    for (i = 0; i < strlen(rsp); i++) { // rsp 문자열을 탐색하면서 이길 수 있는 손동작을 order 문자열에 저장합니다.
        if (rsp[i] == '2') { // 만약 rsp[i]가 '2'라면
            order[i] = '0'; // order[i]에 '0'을 저장합니다.
        }
        else if (rsp[i] == '0') { // 만약 rsp[i]가 '0'이라면
            order[i] = '5'; // order[i]에 '5'를 저장합니다.
        }
        else { // 그렇지 않은 경우 (rsp[i]가 '5'인 경우)
            order[i] = '2'; // order[i]에 '2'를 저장합니다.
        }
    }
    order[i] = '\0'; // order 문자열의 끝에 널 문자를 추가합니다.
    return order; // order 문자열의 포인터를 반환합니다.
}

// 가위바위보 게임을 실행하는 main 함수입니다.
int main() {
    int move; // 사용자가 입력한 가위바위보 손동작을 저장할 변수입니다.
    char rsp[2]; // 사용자가 입력한 가위바위보 손동작을 문자열 형태로 저장할 배열입니다.
    char play_again = 'y'; // 게임을 다시 할 지를 묻는 변수입니다.

    while (play_again == 'y' || play_again == 'Y') { // 게임을 계속 실행할 동안 반복
        printf("Enter your move (2 for scissors, 0 for rock, 5 for paper): "); // 사용자에게 입력받는 메시지 출력
        scanf_s("%d", &move); // 사용자의 입력을 받아 move에 저장

        if (move == 2) { // 사용자가 가위를 선택한 경우
            rsp[0] = '2'; // rsp 배열에 '2'를 저장
            rsp[1] = '\0'; // rsp 배열의 끝에 '\0' 문자를 추가하여 문자열을

        }
        else if (move == 0) { // 사용자가 바위를 선택한 경우
            rsp[0] = '0'; // rsp 배열에 '0'을 저장
            rsp[1] = '\0'; // rsp 배열의 끝에 '\0' 문자를 추가하여 문자열을 완성
        }
        else if (move == 5) { // 사용자가 보를 선택한 경우
            rsp[0] = '5'; // rsp 배열에 '5'를 저장
            rsp[1] = '\0'; // rsp 배열의 끝에 '\0' 문자를 추가하여 문자열을 완성
        }
        else { // 사용자가 잘못된 값을 입력한 경우
            printf("Invalid move\n"); // 잘못된 입력임을 알리는 메시지 출력
            continue; // 다시 입력받기 위해 반복문의 처음으로 이동
        }

        char* order = solution(rsp); // solution 함수를 사용하여 이길 수 있는 값 계산
        printf("Winning move: %c\n", order[0]); // 이길 수 있는 값을 출력
        free(order); // 동적 할당한 메모리를 해제

        printf("Do you want to play again? (y/n): "); // 게임을 다시 할 것인지 묻는 메시지 출력
        scanf_s(" %c", &play_again); // 사용자의 입력을 받아 play_again에 저장
    }

    return 0;
}
